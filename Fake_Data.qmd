---
title: "Fake Data Vocera"
format: html
editor: visual
---

```{r}
#| label: setup
library(tidyverse)
library(ggplot2)
library(tibble)
library(forcats)
library(quarto)
library(stringr)
library(tidyr)
library(daff)
library(readr)
library(dplyr)
set.seed(1234)
```

```{r}
fake_data <- tibble(
  Patient_ID = 1:100,
  Age = sample(20:90, 100, replace = TRUE),
  Nurse = sample(LETTERS, 100, replace = TRUE),
  Braden_Scale = sample(6:23, 100, replace = TRUE),
  Length_of_Stay = sample(0:200, 100, replace = TRUE),
  Nurse_Associated_With_Event = sample(LETTERS, 100, replace = TRUE),
  Type_of_Event = sample(c("Missed Turn", "Repeated Turn"), 100, replace = TRUE),
  Week_of_Event = sample(seq(as.Date("2024-09-01"), as.Date("2025-02-01"), by = "day"), 100, replace = TRUE),
  Time_of_Event = format(sample(seq(ISOdatetime(2024,1,1,0,0,0), ISOdatetime(2025,1,31,23,59,59), by = "hour"), 100, replace = TRUE), "%H:%M:%S"),
  Date_of_Event = sample(seq(as.Date("2024-09-01"), as.Date("2025-02-01"), by = "day"), 100, replace = TRUE)
)

# CHECK
fake_data
```

```{r}
# Rename and Reorder Columns 
fake_data <- fake_data %>%
  select("Patient ID" = "Patient_ID", "Age", "Braden Scale" = "Braden_Scale", "Length of Stay" =  "Length_of_Stay","Type of Event" = "Type_of_Event", "Week of Event" = "Week_of_Event", "Time of Event" = "Time_of_Event", "Date of Event" = "Date_of_Event", "Nurse", "Nurse Associated With Event" = "Nurse_Associated_With_Event")

# CHECK
fake_data
```

```{r}
## Descriptive stats pt. 1
fake_data %>%
  summarize(
    mean_age = mean(Age, na.rm = TRUE), # na.rm means it will ignore any missing values
    sd_age = sd(Age, na.rm = TRUE),
    mean_los = mean(`Length of Stay`, na.rm = TRUE),
    sd_los = sd(`Length of Stay`, na.rm = TRUE)
  ) %>%
    mutate(
  `mean_age` = round(`mean_age`, 1),
  `sd_age` = round(`sd_age`, 1),
  `mean_los` = round(`mean_los`, 1),
  `sd_los` = round(`sd_los`, 1)
  ) %>%
  rename(
  `Mean Age` = `mean_age`,
  `Standard Deviation Age` = `sd_age`,
  `Mean Length of Stay` = `mean_los`,
  `Standard Deviation Length of Stay` = `sd_los`)

 ########################### ########################### ###########################

# Type of Event Occurrences
fake_data %>%
  count(`Type of Event`, sort = TRUE) # sort = True places it in descending order 
```

```{r}
## NURSE DATA ANALYSIS PT.1
## 1. How many events were associated with a nurse  
fake_nurse_event_data <- fake_data # Moving original set into new one (fake_nurse_event_data) 
fake_nurse_event_data
fake_nurse_event_data %>%
  count(`Nurse`, sort = TRUE)

 ########################### ########################### ###########################

## 2. Percentage and which nurses committed which event for instance Nurse C was associated with 9 events; therefore, how many were missed vs repeated turns
fake_nurse_event_data_Perc <- fake_nurse_event_data %>%
  group_by(`Nurse`, `Type of Event`) %>%
  summarize(Count = n(), .groups = "drop") %>% # .groups = "drop" will remove the grouping basically groups it to do count then ungroups it
  group_by(Nurse) %>% # We are now grouping 
  mutate(Percentage = (Count / sum(Count))*100) %>% # Count/sum(count) will calc propor then mult by 100 helps to create %
  pivot_wider( # Helping to move the data from long to wide data format below
    names_from = `Type of Event`, 
    values_from = c(Count, Percentage),
    values_fill = list(Count = 0, Percentage = 0)) %>% # If anything is missing then na WILL NOT be placed but instead WILL have 0 
  ungroup()

# Check
fake_nurse_event_data_Perc

 ########################### ########################### ########################### 

## 3. Which nurses committed which event for instance Nurse C was associated with 9 events; therefore, how many were missed vs repeated turns
fake_nurse_event_data <- fake_nurse_event_data %>%
  group_by(`Nurse`, `Type of Event`) %>%
  summarize(Count = n(), .groups = "drop") %>%
  pivot_wider(names_from = `Type of Event`, values_from = Count, values_fill = list(Count = 0)) # Helping to move the data from long to wide data format

 ########################### ########################### ###########################

## 2.1. Fixing the deci placement 
fake_nurse_event_data_Perc <- fake_nurse_event_data_Perc %>%
  mutate(
  `Percentage_Missed Turn` = round(`Percentage_Missed Turn`, 1),
  `Percentage_Repeated Turn` = round(`Percentage_Repeated Turn`, 1))

 # Check 
fake_nurse_event_data_Perc

 ########################### ########################### ########################### 

## 2.2. Fixing the names 
  fake_nurse_event_data_Perc <- fake_nurse_event_data_Perc %>%
  rename(
    `Percentage Missed Turn` = `Percentage_Missed Turn`,
    `Percentage Repeated Turn` = `Percentage_Repeated Turn`,
    `Count Missed Turn` = `Count_Missed Turn`,
    `Count Repeated Turn` = `Count_Repeated Turn`)
 
# Check
fake_data_Repeated <- fake_data
fake_data_Repeated <- fake_data_Repeated %>%
mutate(Repeated_Turn_YesorNo = if_else(str_detect(`Type of Event`, "Repeated Turn"), "Yes", "No")) %>% # str_detect will return a true/false or yes/no
  mutate(Repeated_Turn_YesorNo = str_to_upper(Repeated_Turn_YesorNo)) # str_to_upper will cap all letters while str_to_title does first letter

# Check
fake_data_Repeated 

 ########################### ########################### ###########################

# Capitalize Nurse Letters
fake_data <- fake_data %>%
  mutate(Nurse = str_to_title(Nurse),
        `Nurse Associated With Event` = str_to_title(`Nurse Associated With Event`)) # str_to_title does first letter ; REMINDER IT IS NOT THE TITLE ITS THE DATA IN COLUMN

# Check
fake_data

```

```{r}
## NURSE DATA ANALYSIS PLOTS pt. 1

# Convert the data back to long
fake_nurse_event_data_Perc_long <- fake_nurse_event_data_Perc
fake_nurse_event_data_Perc_long <- fake_nurse_event_data_Perc_long %>%
pivot_longer(cols = c(`Count Missed Turn`, `Count Repeated Turn`), 
              names_to = "Event Type", values_to = "Count")

########################### ########################### ###########################

# 1 Bar Chart (# of Events / Nurse)
ggplot(fake_nurse_event_data_Perc_long, aes(x = Nurse, y= Count, fill = `Event Type`)) + #aes is aesthetic, fill is type of aesthetic and here bars are filled based on event type
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  # geom_bar creates bar char, stat= "identity" uses the values from data set, position = position_dodge helps make sure the bars are not stacked 
  labs(title = "Number of Events Per Nurse", x = "Nurse", y = "Event Count") +
  scale_fill_manual(values = c("Count Missed Turn" = "darkblue", "Count Repeated Turn" = "darkorange")) + # scale_fill_manual allows for you to place the colors manually 
  theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 8), # hjust used for overlap prevention for text  
      plot.title = element_text(size = 20, face = "bold"),      
      legend.position = "bottom",
      legend.title = element_blank(),
      panel.grid.minor = element_blank()) # panel.grid.minor helps get rid of the grid lines

```

```{r}
## NURSE DATA ANALYSIS PT.2
## Check how nurses do overtime 
fake_nurse_event_time_date <- fake_data
fake_nurse_event_time_date <- fake_nurse_event_time_date  %>%
  mutate(`Week of Event` = as.Date(cut(`Week of Event`, breaks = "week"))) %>%  # as.Date MAKE SURE D is CAP but it will convert val to date, cut whatever into a category, breaks will help specify the point where it should be cut off
  group_by(`Week of Event`, `Nurse`, `Type of Event`) %>%
  summarize(Count = n(), .groups = "drop") 

#Check
fake_nurse_event_time_date

```

```{r}
## NURSE DATA ANALYSIS PLOTS pt. 2
ggplot(fake_nurse_event_time_date, aes(x = `Week of Event`, y= `Count`, color = `Nurse`, group = interaction(`Nurse`, `Type of Event`))) +
  geom_line(size = 1) + # geom_line is line graph
  geom_point(size = 2) + # geom_point is scatter graph
  geom_smooth(aes(group = `Type of Event`), method = "loess", se = FALSE, linetype = "dashed", color = "black", size = 1.2) + # geom_smooth is trend line (smooth)
  scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month")+ # date_labels = "%b-%Y" will help for it to be month-year
  facet_grid(rows = vars(`Type of Event`), scales = "free")+
  labs(title = "Nurse Turn Event Trends Over Time",
       x= "Week of Event",
       y= "Number of Events",
       color= "Nurse")+
  theme_minimal() +
  theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
      plot.title = element_text(size = 20, face = "bold"),  
      plot.subtitle = element_text(size = 14, face = "italic"),
      legend.position = "right",
      legend.direction = "vertical",
      legend.key.size = unit(0.6, "cm"),
      panel.spacing = unit(.5, "lines") # helps spacing want to use when facets are 
       )


```

```{r}
## NURSE DATA ANALYSIS PT.3
fake_nurse_shift <- fake_data %>%
mutate(`Nurse` = as.factor(`Nurse`),
    Hour = as.numeric(format(strptime(`Time of Event`, format = "%H:%M:%S"), "%H")), # parses chr string to date-time  
    Shift_Type = case_when(
      Hour >= 6 &
      Hour < 18 ~ "Day", 
TRUE ~ "Night")) %>%
mutate(
  Shift_Type = fct_recode(Shift_Type, "Day Shift" = "Day", "Night Shift" = "Night"), # Renaming forcat func
   Shift_Type = fct_relevel(Shift_Type,"Day Shift", "Night Shift"), # reorder levels forcat func
  `Type of Event` = factor(`Type of Event`, levels = c("Missed Turn", "Repeated Turn")),
  `Nurse` = fct_lump(`Nurse`, n = 4)) %>% # creates other categ forecat func
   select(-Hour)
  
# Check
fake_nurse_shift

```

```{r}
## NURSE DATA ANALYSIS PLOT PT.3
ggplot(fake_nurse_shift, aes(x= `Shift_Type`, fill= `Type of Event`)) +
  geom_bar(position = "stack", width = 0.6, color = "black") +
  geom_text(stat = "count", aes(label = ..count..), 
    position = position_stack(vjust = 0.5), size = 5, color = "white") + # geom_text is labels/text/values for bars here, aes(label = ..count..) is just the count for each category, position _stack places the label inside the bars, vjust helping to center text (vertically remember hjust)
  scale_fill_manual(values = c("Missed Turn" = "blue", "Repeated Turn" = "orange")) +
  labs(title = "Event Occurrence by Shift",
       x = "Shift Type",
       y = "Number of Events",
       fill = "Event Type") +
  theme_minimal() +
  theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"),
legend.position = "right",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12)
)


```

```{r}
## NURSE DATA ANALYSIS PT.4
fake_nurse_weekdayend <- fake_data
fake_nurse_weekdayend <- fake_nurse_weekdayend  %>%
mutate(
  Day_Type = case_when(
    weekdays(as.Date(`Date of Event`)) %in% c("Saturday", "Sunday") ~ "Weekend",     TRUE ~ "Weekday"  
  )
)

# Check
fake_nurse_weekdayend
```

```{r}
## NURSE DATA ANALYSIS PLOT PT.4
ggplot(fake_nurse_weekdayend, aes(x = Day_Type, fill = `Type of Event`)) +
  geom_bar(position = "dodge", width = 0.6, color = "black") +
  scale_fill_manual(values = c("Missed Turn" = "blue", "Repeated Turn" = "orange")) +
  labs(title = "Event Occurrence on Weekdays vs. Weekends",
       x = "Day Type",
       y = "Number of Events",
       fill = "Event Type") +
  theme_minimal() +
  theme(
  plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
  axis.text.x = element_text(size = 12, face = "bold"),
  axis.text.y = element_text(size = 12),
  axis.title.x = element_text(size = 14, face = "bold"),
  axis.title.y = element_text(size = 14, face = "bold"),
  legend.position = "right",
  legend.title = element_text(size = 12, face = "bold"),
  legend.text = element_text(size = 10)
  )


```

```{r}
## Patient Analysis pt 1
fake_patient_event <- fake_data
fake_patient_event <- fake_patient_event %>%
  mutate(Age_Group = cut(Age, breaks = c(20, 40, 60, 80, 100), # cut whatever into a category, breaks will help specify the point where it should be cut off
                         labels = c("20-39", "40-59", "60-79", "80+")))

# Check
fake_patient_event

```

```{r}
## Patient Analysis PLOT pt 1
ggplot(fake_patient_event, aes(x = Age_Group, fill = `Type of Event`)) +
  geom_bar(position = "dodge", width = 0.6, color = "black") +
  scale_fill_manual(values = c("Missed Turn" = "blue", "Repeated Turn" = "orange")) +
  labs(title = "Event Occurrence by Age Group",
       x = "Age Group",
       y = "Number of Events",
       fill = "Event Type") + 
  theme_minimal() +
  theme(
  plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
  axis.text.x = element_text(size = 12, face = "bold"),
  axis.text.y = element_text(size = 12),
  axis.title.x = element_text(size = 14, face = "bold"),
  axis.title.y = element_text(size = 14, face = "bold"),
  legend.position = "right",
  legend.title = element_text(size = 12, face = "bold"),
  legend.text = element_text(size = 10)
  ) 


```

```{r}
## Patient Analysis Plot pt 2
## Event type and lOS
ggplot(fake_data, aes(x= `Type of Event`, y = `Length of Stay`, fill = `Type of Event`)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) + # outlier. is just outliers 
  scale_fill_manual(values = c("Missed Turn" = "blue", "Repeated Turn" = "orange")) +
  labs(title = "Relationship Between Event Type and Length of Stay",
       x= "Event Type",
       y= "Length of Stay (Days)",
       fill= "Event Type") +
  theme_minimal() +
  theme(
  plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
  axis.text.x = element_text(size = 12, face = "bold"),
  axis.text.y = element_text(size = 12),
  axis.title.x = element_text(size = 14, face = "bold"),
  axis.title.y = element_text(size = 14, face = "bold"),
  legend.position = "none",
  legend.title = element_text(size = 12, face = "bold"),
  legend.text = element_text(size = 10)
  ) 

```

```{r}
# T test for Los and Type of event
result_t_test <- t.test(`Length of Stay` ~ `Type of Event`, data = fake_data)

# Check
result_t_test

```

```{r}
## Patient Stay
fake_data <- fake_data %>%
  mutate(
    Type_of_Stay = if_else(`Length of Stay` >= 15, "Long Stay", "Normal Stay")
  )


## High Risk and Patient Stay
## Less than 9 is considered severe
fake_data <- fake_data %>%
  mutate(
    Long_Stay_High_Risk = if_else(
      (`Braden Scale` <= 12 & `Length of Stay` >15) | (`Braden Scale` <9),
      "High Risk", 
      "Normal Risk"
    ))

# Check 
fake_data

```

```{r}
# Analyze the data for Event(s)
#Type of Events
fake_data %>%
  count(`Type of Event`, sort = TRUE)
 
```

```{r}
# Write fake_data to a .csv file 
getwd()
write_csv(fake_data, "fake_data.csv")
fake_data <- read_csv("/Users/michaelavalosjr./Repos for Rstudio/Vocera-Phone-Alarms/fake_data.csv")

```
